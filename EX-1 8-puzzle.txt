import heapq

# Class representing a state of the puzzle
class PuzzleState:
    def _init_(self, puzzle, parent=None, move=""):
        self.puzzle = puzzle
        self.parent = parent
        self.move = move
        if self.parent:
            self.cost = self.parent.cost + 1
        else:
            self.cost = 0

    def _lt_(self, other):
        return (self.cost + self.heuristic()) < (other.cost + other.heuristic())

    def _eq_(self, other):
        return self.puzzle == other.puzzle

    def _hash_(self):
        return hash(str(self.puzzle))

    def get_blank_pos(self):
        for i in range(3):
            for j in range(3):
                if self.puzzle[i][j] == 0:
                    return i, j

    def swap(self, i1, j1, i2, j2):
        temp = self.puzzle[i1][j1]
        self.puzzle[i1][j1] = self.puzzle[i2][j2]
        self.puzzle[i2][j2] = temp

    def possible_moves(self):
        moves = []
        i, j = self.get_blank_pos()
        if i > 0:
            moves.append("Up")
        if i < 2:
            moves.append("Down")
        if j > 0:
            moves.append("Left")
        if j < 2:
            moves.append("Right")
        return moves

    def apply_move(self, move):
        i, j = self.get_blank_pos()
        if move == "Up":
            self.swap(i, j, i - 1, j)
        elif move == "Down":
            self.swap(i, j, i + 1, j)
        elif move == "Left":
            self.swap(i, j, i, j - 1)
        elif move == "Right":
            self.swap(i, j, i, j + 1)

    def is_goal(self):
        return self.puzzle == [[0, 1, 2], [3, 4, 5], [6, 7, 8]]

    def heuristic(self):
        # Manhattan distance heuristic
        distance = 0
        for i in range(3):
            for j in range(3):
                if self.puzzle[i][j] != 0:
                    x, y = divmod(self.puzzle[i][j] - 1, 3)
                    distance += abs(x - i) + abs(y - j)
        return distance

    def get_solution_path(self):
        path = []
        current = self
        while current:
            path.append(current)
            current = current.parent
        return path[::-1]

# A* algorithm to solve the puzzle
def solve_puzzle(initial_state):
    visited = set()
    frontier = []
    heapq.heappush(frontier, initial_state)

    while frontier:
        current = heapq.heappop(frontier)
        visited.add(current)

        if current.is_goal():
            return current.get_solution_path()

        for move in current.possible_moves():
            new_state = PuzzleState([row[:] for row in current.puzzle])
            new_state.apply_move(move)

            if new_state not in visited:
                heapq.heappush(frontier, new_state)

    return None

# Function to print the solution path
def print_solution(path):
    for i, state in enumerate(path):
        print("Move", i, ":", state.move)
        for row in state.puzzle:
            print(row)
        print()

# Example usage
if _name_ == "_main_":
    initial_puzzle = [[1, 2, 3], [4, 0, 5], [6, 7, 8]]
    initial_state = PuzzleState(initial_puzzle)
    solution_path = solve_puzzle(initial_state)
    if solution_path:
        print("Solution found!")
        print("Number of moves:", len(solution_path) - 1)
        print_solution(solution_path)
    else:
        print("No solution found.")
